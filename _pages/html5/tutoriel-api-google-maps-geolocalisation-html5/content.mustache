<a href="/_pages/html5/tutoriel-api-google-maps-geolocalisation-html5/img/tutoriel-api-google-maps-html5.png" target="_blank">
<img src="/_pages/html5/tutoriel-api-google-maps-geolocalisation-html5/img/tutoriel-api-google-maps-html5.png" alt="Tutoriel API Google Maps HTML5" title="Tutoriel API Google Maps HTML5" />
</a>

<p class="island">
  Cet article a été écrit en <strong>2010</strong>. Le web évoluant vite, il est possible que certains points soient maintenant obsolètes !
</p>

Ce tutoriel vient en complément au {{> _pages/html5/tutoriel-geolocalisation-html5/link }}Tutoriel de géolocalisation en HTML5</a>, et vous apprendra à exploiter les informations de géolocalisation que vous y avez obtenu sur une carte Google Maps.
Nous allons réaliser une application qui affiche votre position sur une carte et trace votre parcours en suivant vos déplacements.

<h2>L'API Google Maps</h2>

Tout d'abord, il est essentiel de bien comprendre ce qu'est une API. Toute application web peut choisir d'autoriser des développeurs tiers à utiliser une partie de ses fonctionnalités. Ces fonctionnalités peuvent être accédées de plusieurs manières :
<ul>
  <li>en téléchargeant une bibliothèque de fonctions pour l'inclure sur son site,</li>
  <li>en récupérant une donnée précise en construisant une URL,</li>
  <li>En incluant directement la bibliothèque en ligne.</li>
</ul>

Concernant Google Maps, on est dans ce dernier cas, c'est à dire qu'on va directement inclure la bibliothèque Google Maps dans notre JavaScript.

<h3>Inclure Google Maps</h3>

Pour inclure les fonctions Google Maps dans notre application, nous ajoutons une balise <code>script</code> dans la partie <code>head</code> de notre page :

<script src="https://gist.github.com/verekia/f2d31eb4faf4f97af1bb77d4e47975b9.js"></script>

L'API Google Maps est disponible sous plusieurs déclinaisons, que l'on peut choisir en ajoutant un paramètre à cette URL.
Parmi ces paramètres on retrouve :
<ul>
  <li>L'utilisation ou non du GPS : <code>sensor</code></li>
  <li>La langue des textes affichés sur la carte : <code>language</code></li>
  <li>Le pays : <code>region</code></li>
</ul>

Dans le cadre de ce tutoriel nous allons simplement activer l'utilisation du GPS avec le paramètre <code>sensor</code> que l'on va passer à <code>true</code> :

<script src="https://gist.github.com/verekia/c41a13a8ecb75032a8ee1e5009a56fd9.js"></script>

Concernant les autres paramètres je vous invite à aller lire la <a href="http://code.google.com/intl/fr-FR/apis/maps/documentation/javascript/basics.html">documentation officielle</a> (en anglais).

<h2>Création de la structure de notre page</h2>

Notre carte va venir se loger dans un simple div, auquel nous allons attribuer l'id <code>map_canvas</code>.

<script src="https://gist.github.com/verekia/0e40365d6156b02a8a1e63d11f4aad7a.js"></script>

Afin que la carte s'affiche en plein écran, et qu'elle le fasse correctement sur tous les navigateurs, nous allons ajouter les propriétés de style suivantes :

<script src="https://gist.github.com/verekia/dc591a5f578d99a9c9f4e6233541ff6a.js"></script>

<p class="island">C'est quoi ces histoires de <code>height</code> et <code>width</code> à <code>100%</code> ?</p>

Pour afficher la carte en plein écran avec des valeurs en pourcentages, les navigateurs les plus âgés auront besoin que l'on définisse également en pourcentage la taille des éléments parents. On indique donc également une <code>height : 100%</code> pour la balise <code>body</code> et pour la balise <code>html</code>.

Nous allons également ajouter une balise <code>meta</code> dans le <code>head</code> de notre HTML afin que l'utilisateur ne puisse pas réduire ou agrandir la carte :

<script src="https://gist.github.com/verekia/5db279c5a36a2c68ba537b8b0ede0693.js"></script>

Et voilà ! Nous avons maintenant une page HTML prête à accueillir une Google Map. Voici ce à quoi devrait ressembler votre code pour le moment :

<script src="https://gist.github.com/verekia/65369dd866d1e1572abc705b5cbc522c.js"></script>

Un rapide aperçu dans le navigateur nous montre... qu'absolument rien ne s'affiche, et c'est tout à fait normal ! Un peu de patience, la magie va agir très bientôt.

<h2>Afficher la carte Google Maps</h2>

Bien, il est temps de passer aux choses sérieuses !
Nous souhaitons afficher la carte une fois notre page html chargée. Pour cela nous allons ajouter l'attribut <code>onload</code> à notre balise <code>body</code> :

<script src="https://gist.github.com/verekia/0af910aea525c267160da05b86f90c9e.js"></script>

Puis créer la fameuse fonction <code>initialize()</code> dans un <code>script</code>.

<script src="https://gist.github.com/verekia/28c37f57ee1342b66e54822e2683233a.js"></script>

Cette fonction va, comme son nom l'indique, initialiser la carte Google Maps. Dans le cadre de ce tutoriel, nous allons créer une carte :
<ul>
  <li>Contenue dans notre <code>div</code> <code>map_canvas</code></li>
  <li>Centrée sur les coordonnées 48.858565, 2.347198 (ce qui représente Châtelet à Paris)</li>
  <li>De niveau de zoom 19 (très précis afin de pouvoir tester facilement les déplacements un peu plus tard)</li>
  <li>En mode <code>ROADMAP</code> c'est à dire un plan classique, sans image satellite ni relief</li>
</ul>

Ces paramètres sont à fournir à l'instanciation de l'objet <code>google.maps.Map</code> comme ceci :

<script src="https://gist.github.com/verekia/0f036aed87524a044a2501ebf6429b13.js"></script>

Revenons un peu sur ce code...

<p></p>

Tout d'abord, le premier paramètre correspond à l'élément du DOM dans lequel va être injecté notre carte (ici <code>map_canvas</code>, que l'on récupère grâce à <code>document.getElementById())</code>. Ensuite, le second paramètre, les options, doivent être fournies sous cette forme : <code>{nom: valeur, nom: valeur, ...}</code>.

<p></p>

On remarque que les coordonnées du <code>center</code> sont fournies au travers d'un nouvel objet : <code>google.maps.LatLng</code>. Il en sera ainsi dès que l'on voudra définir la latitude et longitude d'une coordonnée.
Enfin <code>mapTypeId</code> correspond au type de carte à afficher :
<ul>
  <li><code>ROADMAP</code> pour le plan</li>
  <li><code>SATELLITE</code> pour les photos satellite</li>
  <li><code>HYBRID</code> pour afficher les photos satellites avec le plan superposé</li>
  <li><code>TERRAIN</code> pour afficher les reliefs</li>
</ul>

Allez, cette fois on peut ouvrir la page html dans son navigateur et... bingo ! Voilà un beau plan centré sur Châtelet ! Si possible, testez avec un smartphone afin de voir que les boutons de zoom, et de changement de vue apparaissent bien et qu'ils soient de la bonne taille. En effet si vous avez oublié la balise meta ils seront minuscules et inaccessibles...

<p class="island">Bon c'est bien joli ton truc mais je ne vois pas où est l'HTML5 là dedans !</p>

Patience on y arrive... Puisqu'on va maintenant utiliser la géolocalisation HTML5 !

<h2>Ajouter la géolocalisation HTML5</h2>

Tout d'abord je précise à nouveau qu'il est nécessaire que vous maitrisiez la {{> _pages/html5/tutoriel-geolocalisation-html5/link }}géolocalisation en HTML5</a> car ses principes ne seront pas réexpliqués dans ce tutoriel.

<p></p>

Pour commencer, à la suite de la fonction <code>initialize()</code>, nous testons la compatibilité du navigateur avec la géolocalisation HTML :

<script src="https://gist.github.com/verekia/12fd7bb55333f5ca5d8690c181eadf4b.js"></script>

Vous pouvez noter que je n'utilise pas d'<code>errorCallback</code>, ceci afin de ne pas alourdir le code et se concentrer sur l'essentiel.
A chaque mise à jour de la position de l'utilisateur, la variable <code>position</code> dans <code>successCallback</code> est mise à jour. De plus, la méthode <code>panTo()</code> permet de centrer la carte sur de nouvelles coordonnées. Par conséquent nous allons ajouter à notre <code>successCallback</code> :

<script src="https://gist.github.com/verekia/71af565e67271d72dfbb4bfa416295a9.js"></script>

Et pour représenter la position exacte, nous allons placer un marqueur sur la carte comme ceci :

<script src="https://gist.github.com/verekia/5892bb313db7c4ad9f582ccb82192645.js"></script>

Nous avons donc à présent :

<script src="https://gist.github.com/verekia/bf1a4ecc25c6836f660f2fd387aa8d8f.js"></script>

A chaque déplacement effectué par l'utilisateur, un nouveau marqueur est placé sur la carte afin d'indiquer votre nouvel emplacement. Sympathique non ?

<p></p>

Notez cependant que si vous faites le test dans la rue avec votre smartphone, dès que le GPS perd le signal, votre position sera replacée au point relais auquel votre 3G est rattachée, ce qui est beaucoup moins précis.

<p></p>

Et voilà ! A ce stade vous avez toutes les connaissances pour exploiter la géolocalisation en HTML5 au travers de l'API Google Maps. Les plus curieux d'entre vous pourront pousser leurs recherches un peu plus loin en parcourant la documentation de l'API Google Maps, afin d'exploiter aux mieux les très nombreuses fonctionnalités proposées par l'API.

<h2>Bonus : le tracé du parcours</h2>

Vous en voulez encore ? Parfait ! Nous allons ajouter à notre application la cerise sur le gâteau qui épatera vos proches ! (qui ont cependant 9 chances sur 10 de vous répondre "Ben qu'est-ce que ça a de si formidable ? C'est l'application Google Maps quoi...", mais ne perdez pas espoir !).

<p></p>

Afin de parfaire notre application nous allons donc tracer une ligne qui va représenter le chemin suivi par l'utilisateur. Pour ce faire, nous allons avoir recours à l'objet <code>google.maps.Polyline</code>.
Un <code>Polyline</code> est une ligne tracée entre plusieurs points. Dans le cadre de cet exemple, à chaque nouvelle position de géolocalisation, nous allons tracer une ligne reliant la position précédente à la nouvelle.

Un <code>Polyline</code> se crée de la manière suivante :

<script src="https://gist.github.com/verekia/ae14f8b33ed18d6be934203334893664.js"></script>

Les 3 derniers paramètres servent à définir l'apparence du tracé (qui sera donc rouge dans cet exemple), et le premier paramètre est un tableau de coordonnées, c'est à dire :

<script src="https://gist.github.com/verekia/d1d0e16a2d11a769c4d28d4cf5f09c44.js"></script>

Cette variable doit être créée avant <code>newLine</code> bien entendu.

On remarque la variable <code>previousPosition</code> qui n'est pas encore définie. Nous allons le faire immédiatement en déclarant une variable globale tout en haut de notre script :

<script src="https://gist.github.com/verekia/41b4a5bd91d567ef8d6d628157dcca1f.js"></script>


Cette variable contiendra en permanence la position précédente afin d'effectuer le tracé du <code>Polyline</code>.

Une fois toutes ces informations fournies pour la création du <code>Polyline</code>, il suffit d'ajouter ce dernier à notre carte :

<script src="https://gist.github.com/verekia/762b549e2ec8ede1bbbf296f30f444c6.js"></script>


Enfin, on attribue la valeur courante de position à previousPosition :

<script src="https://gist.github.com/verekia/391f4c45306e87a466719fb3b98a682c.js"></script>

Ce qui donne le code suivant :

<script src="https://gist.github.com/verekia/b5aeef63df697c790558f099879283cd.js"></script>

On a également ajouté une condition sur l'existence de la variable <code>previousPosition</code>, afin de ne pas déclencher d'erreur lors de la première exécution du code.

<p></p>

Si vous testez ce code sur votre smartphone, vous remarquerez que chaque coupure du signal GPS provoque le tracé de lignes vers le point très éloigné de votre anterre 3G la plus proche. Afin de pallier à ce défaut, nous pouvons faire appel à l'une des propriétés très intéressantes de l'objet <code>position.coords</code>. Si vous avez bien suivi le précédent tutoriel vous devriez avoir deviné qu'il s'agit de la propriété <code>accuracy</code> !

<p></p>

Afin de ne jamais prendre en compte les coordonnées imprécises du Wifi et de la 3G sans GPS, il nous suffit donc d'ajouter un seuil de précision minimal en mètres qui va englober tout le contenu du <code>successCallback</code>.

<script src="https://gist.github.com/verekia/c3b478d91a2d6c1aff28fb491ddb22bd.js"></script>

Et voilà c'est terminé ! Vous pouvez maintenant voir en oeuvre la démonstration de ce tutoriel ici :

{{> _pages/demo/exemple-geolocalisation-html5-api-google-maps/link }}Démonstration de géolocalisation HTML5 avec l'API Google Maps</a>.

<p></p>

J'espère que ce tutoriel vous a plu, et qu'il a rendu un peu plus concrète l'utilisation de la géolocalisation en HTML5. C'est vrai qu'avoir des chiffres qui bougent c'est bien, mais une carte c'est mieux !

<p></p>

A très bientôt pour de nouveaux tutoriels !
